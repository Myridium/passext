#!/usr/bin/env python2
#
# passext-host
#
# This script allows the chrome extension to access the local password-store
# and does all the heavy-lifting. It does not use pass(1) directly because it
# is easier to use gpg ourselves.

import sys
import os
import io
import re
import time
import json
import struct
import subprocess
import urlparse
import signal
import fnmatch


class GPG(object):
    """Provide access to gnupg. We don't use pass(1) directly because we have
       more control this way.
    """

    def unlocked(self, path):
        """Try to decrypt a file from the pass(1) database and return True or
           False depending on whether it can be decrypted without the user
           being asked for the passphrase.
        """
        proc = subprocess.Popen(["gpg", "--decrypt", "--status-fd", "2", "--pinentry-mode", "cancel", path],
                stdout=open("/dev/null", "wb"), stderr=subprocess.PIPE)

        for line in proc.stderr:
            line = line.strip()
            line = line[9:] # Strip "[GNUPG:] "

            if line == "DECRYPTION_OKAY":
                return True
            elif line == "DECRYPTION_FAILED":
                return False

        else:
            raise ValueError

    def reload_agent(self):
        """Tell gpg-agent to forget all cached passphrases.
        """
        subprocess.call("echo reloadagent | gpg-connect-agent", shell=True,
                stdout=open("/dev/null", "wb"), stderr=subprocess.STDOUT)

    def decrypt(self, path):
        """Decrypt a file from the pass(1) database and return its lines.
        """
        proc = subprocess.Popen(["gpg", "--decrypt", "--batch", "--quiet", path], stdout=subprocess.PIPE)
        for line in proc.stdout:
            yield line.rstrip()
        proc.stdout.close()
        proc.wait() # FIXME error checking


class PassDB(object):
    """Allow access to the pass(1) database in ~/.password-store.
    """

    def __init__(self, path=os.path.expanduser("~/.password-store")):
        self.gpg = GPG()
        self.path = path

    def iterate_store(self):
        """Walk through the files in the password store.
        """
        for root, dirnames, filenames in os.walk(self.path):
            for filename in filenames:
                if os.path.splitext(filename)[1] != ".gpg":
                    continue
                yield os.path.join(root, filename)

    def unlocked(self):
        """Test if the password store is unlocked, i.e. gpg-agent has (still)
           cached the passphrase. Do this by trying to decrypt one of the files
           in the password store.
        """
        for path in self.iterate_store():
            try:
                return self.gpg.unlocked(path)
            except ValueError:
                continue
        else:
            # There are no encrypted files inside the pass store.
            return False

    def find(self, url):
        """Search for a url pattern in one of the password store items.
        """
        for info in self:
            if fnmatch.fnmatch(url, info["pattern"]):
                return info

    def setup(self):
        """Decrypt the first file found in the password store in order to trigger
           gpg-agent to ask for the passphrase, thus opening the password store.
        """
        for info in self:
            break

    def teardown(self):
        """Close the password store by telling gpg-agent to forget all cached
           passphrases.
        """
        self.gpg.reload_agent()

    def __iter__(self):
        """Collect all password store elements.
        """
        for path in self.iterate_store():
            lines = list(self.gpg.decrypt(path))

            info = {}
            try:
                info["password"] = lines.pop(0)
            except IndexError:
                # The password could not be produced, either the pass file
                # is empty or decryption failed.
                continue

            for line in lines:
                key, value = line.split(":", 1)
                info[key.strip().lower()] = value.strip()

            # Do some transformation to possible user-defined
            # keys to normalize the information.
            for key in ("user", "username", "name"):
                if key in info:
                    info["login"] = info.pop(key)
                    break
            for key in ("uri", "host", "homepage"):
                if key in info:
                    info["url"] = info.pop(key)
                    break

            # We need a pattern to match against or at least a URL we can
            # convert to a pattern.
            if "pattern" not in info and "url" not in info:
                continue

            info["host"] = urlparse.urlsplit(info["url"]).netloc
            if "pattern" not in info:
                # Create a default pattern.
                info["pattern"] = "*" + info["host"] + "/*"

            yield info


class Server(object):
    """Communication between passext-host and the chrome extension via stdin
       and stdout.
    """

    def __init__(self):
        self.db = None

    @staticmethod
    def send_message(response):
        # A single message is made up of a length field followed by json data.
        data = json.dumps(response).encode("utf8")
        sys.stdout.write(struct.pack("I", len(data)))
        sys.stdout.write(data)
        sys.stdout.flush()

    @staticmethod
    def read_message():
        buf = sys.stdin.read(struct.calcsize("I"))
        if len(buf) != struct.calcsize("I"):
            raise EOFError
        length = struct.unpack('I', buf)[0]
        data = sys.stdin.read(length).decode("utf-8")
        return json.loads(data)

    def handle_request(self):
        try:
            request = self.read_message()
        except EOFError:
            return self.send_message({})

        response = self.execute_request(request)
        self.send_message(response)

    def execute_request(self, request):
        command = request.get("command")

        db = PassDB()

        if command == "setup":
            db.setup()
            return {"unlocked": db.unlocked()}

        elif command == "teardown":
            db.teardown()
            return {"unlocked": db.unlocked()}

        elif command == "unlocked":
            return {"unlocked": db.unlocked()}

        elif command == "find":
            info = db.find(request["url"])
            if info is not None:
                return info

        return {"result": "error"}

if __name__ == "__main__":
    server = Server()
    server.handle_request()

